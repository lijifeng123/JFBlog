{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1654593429224},{"_id":"source/CNAME","hash":"f43e0f14d22cd3208184e6982f5aeb3f2cfe5ed8","modified":1652455899210},{"_id":"source/.DS_Store","hash":"b4e9149442e77bb97f61ded2e3801f8918022788","modified":1654671315642},{"_id":"source/about/index.md","hash":"8563513b318b033597b33994ae4bdd670b96c91a","modified":1654833464229},{"_id":"source/_posts/理解指针.md","hash":"3536cbfc556ca58533fc491b9f3e022015f960c6","modified":1654829946525},{"_id":"source/_posts/hello-world.md","hash":"50b5764dbca53724e4c6b411bedba2bb54bf5e5f","modified":1654588332334},{"_id":"source/uploads/.DS_Store","hash":"558099c2317749b8bb3969038346dd1e12e54bb9","modified":1654827959652},{"_id":"source/tags/index.md","hash":"10ad19761cefe3c79994a1c707c3949c58ced5b2","modified":1652581034025},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1652425454390},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1652425454387},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1652425454391},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1652425454387},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1652425454387},{"_id":"themes/next/_config.yml","hash":"5db18299698fc85480fc03fcbfff916ea4c71b18","modified":1652581168389},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1652425454391},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1652425454391},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1652425454440},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1652425454392},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1652425454391},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1652425454399},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1652425454389},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1652425454388},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1652425454388},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1652425454389},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1652425454390},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1652425454389},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1652425454389},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1652425454390},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1652425454390},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1652425454390},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1652425454393},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1652425454390},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1652425454393},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1652425454394},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1652425454393},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1652425454394},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1652425454394},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1652425454399},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1652425454400},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1652425454400},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1652425454394},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1652425454395},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1652425454400},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1652425454400},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1652425454401},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1652425454395},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1652425454401},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1652425454402},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1652425454402},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1652425454401},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1652425454402},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1652425454403},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1652425454403},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1652425454403},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1652425454403},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1652425454404},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1652425454404},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1652425454404},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1652425454405},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1652425454405},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1652425454405},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1652425454405},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1652425454406},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1652425454438},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1652425454439},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1652425454438},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1652425454439},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1652425454472},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1652425454439},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1652425454440},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1652425454388},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1652425454389},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1652425454388},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1652425454389},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1652425454395},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1652425454396},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1652425454396},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1652425454397},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1652425454396},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1652425454397},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1652425454397},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1652425454396},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1652425454398},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1652425454398},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1652425454398},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1652425454399},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1652425454407},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1652425454399},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1652425454407},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1652425454406},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1652425454407},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1652425454408},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1652425454411},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1652425454412},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1652425454416},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1652425454417},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1652425454417},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1652425454422},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1652425454423},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1652425454429},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1652425454426},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1652425454424},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1652425454430},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1652425454440},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1652425454444},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1652425454431},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1652425454453},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1652425454445},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1652425454458},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1652425454458},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1652425454459},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1652425454465},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1652425454471},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1652425454458},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1652425454472},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1652425454473},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1652425454472},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1652425454473},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1652425454473},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1652425454473},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1652425454474},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1652425454474},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1652425454474},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1652425454474},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1652425454516},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1652425454509},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1652425454475},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1652425454515},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1652425454516},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1652425454516},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1652425454517},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1652425454516},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1652425454517},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1652425454517},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1652425454518},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1652425454520},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1652425454518},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1652425454521},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1652425454518},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1652425454521},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1652425454521},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1652425454521},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1652425454523},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1652425454522},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1652425454408},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1652425454524},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1652425454525},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1652425454409},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1652425454409},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1652425454409},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1652425454526},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1652425454410},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1652425454410},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1652425454410},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1652425454411},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1652425454411},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1652425454412},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1652425454413},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1652425454413},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1652425454413},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1652425454414},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1652425454414},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1652425454414},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1652425454415},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1652425454422},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1652425454416},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1652425454423},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1652425454423},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1652425454423},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1652425454423},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1652425454424},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1652425454425},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1652425454425},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1652425454425},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1652425454426},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1652425454427},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1652425454426},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1652425454427},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1652425454428},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1652425454428},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1652425454428},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1652425454429},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1652425454430},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1652425454430},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1652425454430},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1652425454431},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1652425454432},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1652425454432},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1652425454432},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1652425454434},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1652425454434},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1652425454435},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1652425454435},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1652425454436},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1652425454438},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1652425454441},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1652425454441},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1652425454441},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1652425454442},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1652425454442},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1652425454442},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1652425454443},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1652425454443},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1652425454443},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1652425454444},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1652425454444},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1652425454514},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1652425454514},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1652425454514},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1652425454515},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1652425454530},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1652425454531},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1652425454515},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1652425454524},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1652425454525},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1652425454475},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1652425454475},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1652425454476},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1652425454480},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1652425454493},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1652425454493},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1652425454503},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1652425454504},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1652425454504},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1652425454505},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1652425454505},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1652425454506},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1652425454508},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1652425454509},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1652425454506},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1652425454510},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1652425454510},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1652425454510},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1652425454510},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1652425454510},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1652425454511},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1652425454511},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1652425454511},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1652425454511},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1652425454512},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1652425454512},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1652425454512},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1652425454513},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1652425454513},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1652425454513},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1652425454513},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1652425454513},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1652425454528},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1652425454527},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1652425454477},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1652425454476},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1652425454476},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1652425454477},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1652425454477},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1652425454478},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1652425454477},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1652425454478},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1652425454478},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1652425454479},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1652425454478},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1652425454479},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1652425454479},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1652425454479},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1652425454479},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1652425454480},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1652425454480},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1652425454481},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1652425454480},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1652425454481},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1652425454481},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1652425454490},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1652425454491},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1652425454490},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1652425454491},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1652425454491},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1652425454491},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1652425454492},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1652425454492},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1652425454494},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1652425454493},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1652425454492},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1652425454494},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1652425454494},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1652425454494},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1652425454495},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1652425454494},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1652425454495},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1652425454492},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1652425454503},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1652425454504},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1652425454503},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1652425454504},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1652425454505},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1652425454505},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1652425454507},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1652425454506},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1652425454507},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1652425454507},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1652425454508},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1652425454507},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1652425454508},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1652425454527},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1652425454529},{"_id":"public/about/index.html","hash":"2a5237d244ba6b9c3b936646b1aebae3a74a240d","modified":1654841406290},{"_id":"public/tags/index.html","hash":"e66e958669ad6da61b6f00a063412e3ffcfae52d","modified":1654841406290},{"_id":"public/archives/index.html","hash":"9d01c2c1f40acfae74c1ae0ceb35e646312d25dc","modified":1654841406290},{"_id":"public/archives/2022/index.html","hash":"22df351aceb660991c5791cb12ea957b4dace000","modified":1654841406290},{"_id":"public/archives/2022/05/index.html","hash":"4f6525a60f3addabee5e7645be9d5e339fde6f94","modified":1654841406290},{"_id":"public/archives/2022/06/index.html","hash":"4eb75417eab3e11800229ec822f2a33a57d0ec25","modified":1654841406290},{"_id":"public/index.html","hash":"899a4acaa9bc16c1fa2c03f12b3e38ef95f12340","modified":1654841406290},{"_id":"public/tags/技术/index.html","hash":"7c9d04510b2057dc89e926d3752d799fe138f802","modified":1654841406290},{"_id":"public/2022/06/07/理解指针/index.html","hash":"e8542baf9f3898dcf0f48bf13b8999e39c592a11","modified":1654841406290},{"_id":"public/2022/05/16/hello-world/index.html","hash":"cce933ff846404d10338fe333afebf61c30cbd71","modified":1654841406290},{"_id":"public/CNAME","hash":"f43e0f14d22cd3208184e6982f5aeb3f2cfe5ed8","modified":1654841406290},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654841406290},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1654841406290},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1654841406290},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1654841406290},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1654841406290},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1654841406290},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1654841406290},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1654841406290},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1654841406290},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654841406290},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1654841406290},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654841406290},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1654841406290},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1654841406290},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1654841406290},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1654841406290},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1654841406290},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1654841406290},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1654841406290},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1654841406290},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1654841406290},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1654841406290},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1654841406290},{"_id":"public/css/main.css","hash":"c816c49a47564b3c69b37c8140af2d38cff32a04","modified":1654841406290},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1654841406290},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1654841406290},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1654841406290},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1654841406290},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1654841406290}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-05-15T02:15:52.000Z","comments":0,"_content":"\n\n\n用blog记录知识，记录生活。\n\n技术要严谨，生活要精彩。\n\n![tangsan](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/tangsan.png)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-15 10:15:52\ncomments: false\n---\n\n\n\n用blog记录知识，记录生活。\n\n技术要严谨，生活要精彩。\n\n![tangsan](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/tangsan.png)","updated":"2022-06-10T03:57:44.229Z","path":"about/index.html","layout":"page","_id":"cl481uhe50000umfy76ric0lt","content":"<p>用blog记录知识，记录生活。</p>\n<p>技术要严谨，生活要精彩。</p>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/tangsan.png\" alt=\"tangsan\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>用blog记录知识，记录生活。</p>\n<p>技术要严谨，生活要精彩。</p>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/tangsan.png\" alt=\"tangsan\"></p>\n"},{"title":"tags","date":"2022-05-15T02:14:38.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-15 10:14:38\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-05-15T02:17:14.025Z","path":"tags/index.html","layout":"page","_id":"cl481uhed0002umfy32i4ewin","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2022-05-15T16:00:00.000Z","_content":"\nhexo创建发布博客流程\n\n<!--more-->\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022.5.16\ntags: 技术\n---\n\nhexo创建发布博客流程\n\n<!--more-->\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-06-07T07:52:12.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl481uhe90001umfy7jqierma","content":"<p>hexo创建发布博客流程</p>\n<span id=\"more\"></span>\n\n\n\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>hexo创建发布博客流程</p>","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"理解指针","date":"2022-06-07T07:54:39.000Z","_content":"\n### 一、引言：\n\n日常开发中，我们经常遇到指针，同时指针也是C语言里极为重要的一个知识点，今天我们就来把它彻底弄明白。\n\n<!--more-->\n\n\n\n### 二：正文\n\n#### 变量与变量值:\n\n```\n    //数据类型（int） 变量名（a） = 值（10）\n    int a = 10;\n```\n\n变量：变量是一个**抽象概念**，可以理解为允许存放数据的空间。当声明一个变量，计算机就会分配空间存放数据。变量可以通过变量名访问。\n\n变量值：变量里面存储的数据即为变量值，变量值可以为数值、字符等类型。\n\n\n\n#### 指针：\n\n**指针：**是一种<u>变量</u>，它的值是一个**内存地址**。（从三个方面分析指针：指针的类型、指针所指向的类型、指针的值）\n\n**指针类型：**`数据类型 *`，int *：整形数据类型的指针； char *： 字符数据类型的指针； void *：无数据类型的指针；等等...\n\n**取地址运算：**`&变量 ` ，取得的结果是变量的**首**地址，是一个**值**（eg：x10db5640）。\n\n**取变量运算：**`*指针变量`，取得的结果是一个变量。\n\n\n\n1.整形数据类型指针：\n\n```\n- (void)testIntExample {\n    \n    //int类型变量a赋值为10\n    int a = 10;\n    //int*类型的指针变量b赋值为&a\n    int *b = &a;\n    //int类型变量c赋值为*b\n    int c = *b;\n    \n    printf(\"变量b---值：%d 地址：%p\",*b,b);\n    printf(\"变量c---值：%d 地址：%p\",c,&c);\n    \n    打印结果：\n    变量b---值：10 地址：0x10db5641c\n    变量c---值：10 地址：0x10db5640c\n}\n```\n\n解读：指针变量b的类型是：int *，指针变量b所指向的变量类型是int类型，b的值是一个地址：0x10db5641c。\n\n\n\n2.字符数据类型指针：\n\n```\n- (void)testCharExample {\n\n    char *a = \"blog\";\n    char *b = a;\n    char *c = b;\n    \n    printf(\"变量b所指变量的值：%s 变量b所指变量的首地址：%p 变量b的地址：%p\",b,b,&b);\n    printf(\"变量c所指变量的值：%s 变量c所指变量的首地址：%p 变量c的地址：%p\",c,c,&c);\n    \n    打印结果：\n\t\t变量b所指变量的值：blog 变量b所指变量的首地址：0x10a951bfc 变量b的地址：0x10a76f410\n\t\t变量c所指变量的值：blog 变量c所指变量的首地址：0x10a951bfc 变量c的地址：0x10a76f408\n}\n```\n\n解读：char*类型指针 变量a 指向char类型变量blog，a的值是 变量blog的首地址0x10a951bfc。\n\n\n\n3.指针与数组：\n\n```\n- (void)testArrayExample {\n    \n    int arr[] = {4,12,34,6,7,788};\n    int *a = arr;//得到的是arr的首地址\n    int *b = &arr[0];//得到的是arr数组第一个元素的地址\n    int *c = arr + 1;//得到的是arr数组第二个元素的地址\n    int *d = &arr[0] + 1;//得到的是arr数组第二个元素的地址\n\n    printf(\"a:%p---b:%p\",a,b);//可以得出a和b是相等的\n    printf(\"c:%p---d:%p\",c,d);//可以得出c和d是相等的\n    printf(\"num:%ld\",c-a);//可以得出c和a之间有几个元素\n    printf(\"数组中第一个元素的字节数：%ld\",sizeof(arr[0]));//获取数组第一个元素的字节数\n    \n    *c = 99;\n    printf(\"arr+1: %d---%p\",*c,c);\n\n    //打印结果：\n    a:0x106f54410---b:0x106f54410\n    c:0x106f54414---d:0x106f54414\n    num:1\n    数组中第一个元素的字节数：4\n    arr+1: 99---0x106f54414\n}\n```\n\n解读：\n\n1）arr 表示arr[]数组的首地址\n\n2）指针c - 指针a，能获取到两个指针之间有几个元素\n\n3）指针变量加减一个整数,p(指针)(+/-)n(整数)计算方式为：指针地址 (+/-) n * 变量占有的字节数\n\n4）sizeof的用法：\n\n- 每种类型的数据在内存单元中占有的字节数是固定的,因此sizeof(arr)/sizeof(arr[0]) = 数组的元素的个数\n- sizeof(arr)：获取的是数组总共占有多少字节\n- sizeof(arr[0])：获取的是数组中一个元素占有的字节数\n\n5）数组变量保存的是地址,但数组变量中保存的地址是不能改变的,注意说的是指针地址不能变,但是指针指向的值是可以变的,因此数组变量应称为指针常量，可以改变数组中地址中存储的值。\n\n\n\n#### OC 应用场景示例：\n\n```\n//采用这种方式传参，可以获取到error的值\n- (void)testErrorExample {\n\n    NSError *err = nil;\n    [self handleResponseCode:400 error:&err];\n    \n    NSLog(@\"err---%p--%@\",err,err);\n    \n    //指针运算符&和*是从右往左运算,他们的优先级相同。*&err和err一样。\n    NSLog(@\"*&err---%p--%@\",*&err,*&err);\n    \n    //打印结果\n    err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 \"(null)\" UserInfo={data=99}\n    *&err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 \"(null)\" UserInfo={data=99}\n    \n}\n\n- (void)handleResponseCode:(NSInteger)code error:(NSError **)error{\n    if (code != 0) {\n        *error = [NSError errorWithDomain:NSCocoaErrorDomain code:100 userInfo:@{@\"data\":@\"99\"}];\n    }\n}\n```\n\n\n\n### 三、扩展\n\n1. 操作系统分为32位和64位，32位的最多只能支持4GB的内存，因为计算机底层并不使用十进制，使用的是二进制，32位的二进制只能支持4G个编号，这意味着操作系统只能为4GB的内存单元编号，因此32位的操作系统最多只能支持4GB的内存，多余的内存不会有编号,因此无法将数据存入这些内存单元中。\n\n2. 指针存储于栈区，不同数据类型的指针大小都相等，因为他们的值都是一个地址，并且长度也相同。32位操作系统中，指针大小是4个字节，64位操作系统中指针大小是8个字节。\n\n   ```\n   //下面代码是在64位操作系统演示\n   -(void)testGetPointerNum {\n       \n       char *a = \"myBlog\";\n       \n       int num1 = 1234325;\n       int *b = &num1;\n       \n       double num2 = 3232.434;\n       double *c = &num2;\n       \n       printf(\"char *类型指针变量a所占字节数：%ld\",sizeof(a));\n       printf(\"int *类型指针变量b所占字节数：%ld\",sizeof(b));\n       printf(\"double *类型指针变量c所占字节数：%ld\",sizeof(c));\n       \n       //打印结果\n       char *类型指针变量a所占字节数：8\n       int *类型指针变量b所占字节数：8\n       double *类型指针变量c所占字节数：8\n   }\n   ```\n\n3. 结构体数据类型变量的大小：`对于某个结构体类型而言，其存储单元大小，等于它当中占用空间最大的基础类型所占用的字节数量。`\n\n   ```\n   - (void)testStructExample {\n       \n       struct Data1{\n           int a;\n           char b;\n           char c;\n       };\n       \n       struct Data2{\n           char c;\n           int a;\n           char b;\n       };\n       \n       struct Data1 p1;\n       p1.a = 1;\n       p1.b = 'd';\n       p1.c = 'f';\n       \n       struct Data2 p2;\n       p2.a = 1;\n       p2.b = 'd';\n       p2.c = 'f';\n       \n       printf(\"p1结构体占用的字节个数为：%ld\",sizeof(p1));\n       printf(\"p2结构体占用的字节个数为：%ld\",sizeof(p2));\n       \n       //打印结果\n       p1结构体占用的字节个数为：8\n       p2结构体占用的字节个数为：12\n   }\n   ```\n\n   解读：\n\n   ![结构体内存结构示意图](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n   你可以看到，在 Data1 中，首先是 int 类型的 a 变量，占用了第一个存储单元，然后 b 和 c 占用了第二个存储单元的前两个字节。再看 Data2，由于 Data2 不同于 Data1 的字段顺序，b 占用了第一个存储单元的第一个字节，剩余的 3 个字节不够存放一个 int 类型变量的，所以按照上面我们讲的规则“当本存储单元不够安放的时候，就从下个存储单元的头部开始安放”， a 变量就单独占用了第二个存储单元，c 自己占用第三个存储单元的第一个字节。所以，虽然在数据表示上，Data1 和 Data2 是等价的，可 Data2 却占用了更多的存储空间，相比于 Data1 造成了 50% 的空间浪费。由此可见，在设计结构体的时候，不仅要设计新的结构体类型中所包含的数据字段，还需要关注各个字段之间的顺序排布。\n\n4. 内存与地址分布图：\n\n![内存空间布局](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.png)\n\n","source":"_posts/理解指针.md","raw":"---\ntitle: 理解指针\ndate: 2022-06-07 15:54:39\ntags: 技术\n---\n\n### 一、引言：\n\n日常开发中，我们经常遇到指针，同时指针也是C语言里极为重要的一个知识点，今天我们就来把它彻底弄明白。\n\n<!--more-->\n\n\n\n### 二：正文\n\n#### 变量与变量值:\n\n```\n    //数据类型（int） 变量名（a） = 值（10）\n    int a = 10;\n```\n\n变量：变量是一个**抽象概念**，可以理解为允许存放数据的空间。当声明一个变量，计算机就会分配空间存放数据。变量可以通过变量名访问。\n\n变量值：变量里面存储的数据即为变量值，变量值可以为数值、字符等类型。\n\n\n\n#### 指针：\n\n**指针：**是一种<u>变量</u>，它的值是一个**内存地址**。（从三个方面分析指针：指针的类型、指针所指向的类型、指针的值）\n\n**指针类型：**`数据类型 *`，int *：整形数据类型的指针； char *： 字符数据类型的指针； void *：无数据类型的指针；等等...\n\n**取地址运算：**`&变量 ` ，取得的结果是变量的**首**地址，是一个**值**（eg：x10db5640）。\n\n**取变量运算：**`*指针变量`，取得的结果是一个变量。\n\n\n\n1.整形数据类型指针：\n\n```\n- (void)testIntExample {\n    \n    //int类型变量a赋值为10\n    int a = 10;\n    //int*类型的指针变量b赋值为&a\n    int *b = &a;\n    //int类型变量c赋值为*b\n    int c = *b;\n    \n    printf(\"变量b---值：%d 地址：%p\",*b,b);\n    printf(\"变量c---值：%d 地址：%p\",c,&c);\n    \n    打印结果：\n    变量b---值：10 地址：0x10db5641c\n    变量c---值：10 地址：0x10db5640c\n}\n```\n\n解读：指针变量b的类型是：int *，指针变量b所指向的变量类型是int类型，b的值是一个地址：0x10db5641c。\n\n\n\n2.字符数据类型指针：\n\n```\n- (void)testCharExample {\n\n    char *a = \"blog\";\n    char *b = a;\n    char *c = b;\n    \n    printf(\"变量b所指变量的值：%s 变量b所指变量的首地址：%p 变量b的地址：%p\",b,b,&b);\n    printf(\"变量c所指变量的值：%s 变量c所指变量的首地址：%p 变量c的地址：%p\",c,c,&c);\n    \n    打印结果：\n\t\t变量b所指变量的值：blog 变量b所指变量的首地址：0x10a951bfc 变量b的地址：0x10a76f410\n\t\t变量c所指变量的值：blog 变量c所指变量的首地址：0x10a951bfc 变量c的地址：0x10a76f408\n}\n```\n\n解读：char*类型指针 变量a 指向char类型变量blog，a的值是 变量blog的首地址0x10a951bfc。\n\n\n\n3.指针与数组：\n\n```\n- (void)testArrayExample {\n    \n    int arr[] = {4,12,34,6,7,788};\n    int *a = arr;//得到的是arr的首地址\n    int *b = &arr[0];//得到的是arr数组第一个元素的地址\n    int *c = arr + 1;//得到的是arr数组第二个元素的地址\n    int *d = &arr[0] + 1;//得到的是arr数组第二个元素的地址\n\n    printf(\"a:%p---b:%p\",a,b);//可以得出a和b是相等的\n    printf(\"c:%p---d:%p\",c,d);//可以得出c和d是相等的\n    printf(\"num:%ld\",c-a);//可以得出c和a之间有几个元素\n    printf(\"数组中第一个元素的字节数：%ld\",sizeof(arr[0]));//获取数组第一个元素的字节数\n    \n    *c = 99;\n    printf(\"arr+1: %d---%p\",*c,c);\n\n    //打印结果：\n    a:0x106f54410---b:0x106f54410\n    c:0x106f54414---d:0x106f54414\n    num:1\n    数组中第一个元素的字节数：4\n    arr+1: 99---0x106f54414\n}\n```\n\n解读：\n\n1）arr 表示arr[]数组的首地址\n\n2）指针c - 指针a，能获取到两个指针之间有几个元素\n\n3）指针变量加减一个整数,p(指针)(+/-)n(整数)计算方式为：指针地址 (+/-) n * 变量占有的字节数\n\n4）sizeof的用法：\n\n- 每种类型的数据在内存单元中占有的字节数是固定的,因此sizeof(arr)/sizeof(arr[0]) = 数组的元素的个数\n- sizeof(arr)：获取的是数组总共占有多少字节\n- sizeof(arr[0])：获取的是数组中一个元素占有的字节数\n\n5）数组变量保存的是地址,但数组变量中保存的地址是不能改变的,注意说的是指针地址不能变,但是指针指向的值是可以变的,因此数组变量应称为指针常量，可以改变数组中地址中存储的值。\n\n\n\n#### OC 应用场景示例：\n\n```\n//采用这种方式传参，可以获取到error的值\n- (void)testErrorExample {\n\n    NSError *err = nil;\n    [self handleResponseCode:400 error:&err];\n    \n    NSLog(@\"err---%p--%@\",err,err);\n    \n    //指针运算符&和*是从右往左运算,他们的优先级相同。*&err和err一样。\n    NSLog(@\"*&err---%p--%@\",*&err,*&err);\n    \n    //打印结果\n    err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 \"(null)\" UserInfo={data=99}\n    *&err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 \"(null)\" UserInfo={data=99}\n    \n}\n\n- (void)handleResponseCode:(NSInteger)code error:(NSError **)error{\n    if (code != 0) {\n        *error = [NSError errorWithDomain:NSCocoaErrorDomain code:100 userInfo:@{@\"data\":@\"99\"}];\n    }\n}\n```\n\n\n\n### 三、扩展\n\n1. 操作系统分为32位和64位，32位的最多只能支持4GB的内存，因为计算机底层并不使用十进制，使用的是二进制，32位的二进制只能支持4G个编号，这意味着操作系统只能为4GB的内存单元编号，因此32位的操作系统最多只能支持4GB的内存，多余的内存不会有编号,因此无法将数据存入这些内存单元中。\n\n2. 指针存储于栈区，不同数据类型的指针大小都相等，因为他们的值都是一个地址，并且长度也相同。32位操作系统中，指针大小是4个字节，64位操作系统中指针大小是8个字节。\n\n   ```\n   //下面代码是在64位操作系统演示\n   -(void)testGetPointerNum {\n       \n       char *a = \"myBlog\";\n       \n       int num1 = 1234325;\n       int *b = &num1;\n       \n       double num2 = 3232.434;\n       double *c = &num2;\n       \n       printf(\"char *类型指针变量a所占字节数：%ld\",sizeof(a));\n       printf(\"int *类型指针变量b所占字节数：%ld\",sizeof(b));\n       printf(\"double *类型指针变量c所占字节数：%ld\",sizeof(c));\n       \n       //打印结果\n       char *类型指针变量a所占字节数：8\n       int *类型指针变量b所占字节数：8\n       double *类型指针变量c所占字节数：8\n   }\n   ```\n\n3. 结构体数据类型变量的大小：`对于某个结构体类型而言，其存储单元大小，等于它当中占用空间最大的基础类型所占用的字节数量。`\n\n   ```\n   - (void)testStructExample {\n       \n       struct Data1{\n           int a;\n           char b;\n           char c;\n       };\n       \n       struct Data2{\n           char c;\n           int a;\n           char b;\n       };\n       \n       struct Data1 p1;\n       p1.a = 1;\n       p1.b = 'd';\n       p1.c = 'f';\n       \n       struct Data2 p2;\n       p2.a = 1;\n       p2.b = 'd';\n       p2.c = 'f';\n       \n       printf(\"p1结构体占用的字节个数为：%ld\",sizeof(p1));\n       printf(\"p2结构体占用的字节个数为：%ld\",sizeof(p2));\n       \n       //打印结果\n       p1结构体占用的字节个数为：8\n       p2结构体占用的字节个数为：12\n   }\n   ```\n\n   解读：\n\n   ![结构体内存结构示意图](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n   你可以看到，在 Data1 中，首先是 int 类型的 a 变量，占用了第一个存储单元，然后 b 和 c 占用了第二个存储单元的前两个字节。再看 Data2，由于 Data2 不同于 Data1 的字段顺序，b 占用了第一个存储单元的第一个字节，剩余的 3 个字节不够存放一个 int 类型变量的，所以按照上面我们讲的规则“当本存储单元不够安放的时候，就从下个存储单元的头部开始安放”， a 变量就单独占用了第二个存储单元，c 自己占用第三个存储单元的第一个字节。所以，虽然在数据表示上，Data1 和 Data2 是等价的，可 Data2 却占用了更多的存储空间，相比于 Data1 造成了 50% 的空间浪费。由此可见，在设计结构体的时候，不仅要设计新的结构体类型中所包含的数据字段，还需要关注各个字段之间的顺序排布。\n\n4. 内存与地址分布图：\n\n![内存空间布局](https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.png)\n\n","slug":"理解指针","published":1,"updated":"2022-06-10T02:59:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl481uhed0003umfy9kjq3dpw","content":"<h3 id=\"一、引言：\"><a href=\"#一、引言：\" class=\"headerlink\" title=\"一、引言：\"></a>一、引言：</h3><p>日常开发中，我们经常遇到指针，同时指针也是C语言里极为重要的一个知识点，今天我们就来把它彻底弄明白。</p>\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"二：正文\"><a href=\"#二：正文\" class=\"headerlink\" title=\"二：正文\"></a>二：正文</h3><h4 id=\"变量与变量值\"><a href=\"#变量与变量值\" class=\"headerlink\" title=\"变量与变量值:\"></a>变量与变量值:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据类型（int） 变量名（a） = 值（10）</span><br><span class=\"line\">int a = 10;</span><br></pre></td></tr></table></figure>\n\n<p>变量：变量是一个<strong>抽象概念</strong>，可以理解为允许存放数据的空间。当声明一个变量，计算机就会分配空间存放数据。变量可以通过变量名访问。</p>\n<p>变量值：变量里面存储的数据即为变量值，变量值可以为数值、字符等类型。</p>\n<h4 id=\"指针：\"><a href=\"#指针：\" class=\"headerlink\" title=\"指针：\"></a>指针：</h4><p><strong>指针：</strong>是一种<u>变量</u>，它的值是一个<strong>内存地址</strong>。（从三个方面分析指针：指针的类型、指针所指向的类型、指针的值）</p>\n<p><strong>指针类型：</strong><code>数据类型 *</code>，int *：整形数据类型的指针； char *： 字符数据类型的指针； void *：无数据类型的指针；等等…</p>\n<p><strong>取地址运算：</strong><code>&amp;变量 </code> ，取得的结果是变量的<strong>首</strong>地址，是一个<strong>值</strong>（eg：x10db5640）。</p>\n<p><strong>取变量运算：</strong><code>*指针变量</code>，取得的结果是一个变量。</p>\n<p>1.整形数据类型指针：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testIntExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //int类型变量a赋值为10</span><br><span class=\"line\">    int a = 10;</span><br><span class=\"line\">    //int*类型的指针变量b赋值为&amp;a</span><br><span class=\"line\">    int *b = &amp;a;</span><br><span class=\"line\">    //int类型变量c赋值为*b</span><br><span class=\"line\">    int c = *b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;变量b---值：%d 地址：%p&quot;,*b,b);</span><br><span class=\"line\">    printf(&quot;变量c---值：%d 地址：%p&quot;,c,&amp;c);</span><br><span class=\"line\">    </span><br><span class=\"line\">    打印结果：</span><br><span class=\"line\">    变量b---值：10 地址：0x10db5641c</span><br><span class=\"line\">    变量c---值：10 地址：0x10db5640c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：指针变量b的类型是：int *，指针变量b所指向的变量类型是int类型，b的值是一个地址：0x10db5641c。</p>\n<p>2.字符数据类型指针：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testCharExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    char *a = &quot;blog&quot;;</span><br><span class=\"line\">    char *b = a;</span><br><span class=\"line\">    char *c = b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;变量b所指变量的值：%s 变量b所指变量的首地址：%p 变量b的地址：%p&quot;,b,b,&amp;b);</span><br><span class=\"line\">    printf(&quot;变量c所指变量的值：%s 变量c所指变量的首地址：%p 变量c的地址：%p&quot;,c,c,&amp;c);</span><br><span class=\"line\">    </span><br><span class=\"line\">    打印结果：</span><br><span class=\"line\">\t\t变量b所指变量的值：blog 变量b所指变量的首地址：0x10a951bfc 变量b的地址：0x10a76f410</span><br><span class=\"line\">\t\t变量c所指变量的值：blog 变量c所指变量的首地址：0x10a951bfc 变量c的地址：0x10a76f408</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：char*类型指针 变量a 指向char类型变量blog，a的值是 变量blog的首地址0x10a951bfc。</p>\n<p>3.指针与数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testArrayExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int arr[] = &#123;4,12,34,6,7,788&#125;;</span><br><span class=\"line\">    int *a = arr;//得到的是arr的首地址</span><br><span class=\"line\">    int *b = &amp;arr[0];//得到的是arr数组第一个元素的地址</span><br><span class=\"line\">    int *c = arr + 1;//得到的是arr数组第二个元素的地址</span><br><span class=\"line\">    int *d = &amp;arr[0] + 1;//得到的是arr数组第二个元素的地址</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;a:%p---b:%p&quot;,a,b);//可以得出a和b是相等的</span><br><span class=\"line\">    printf(&quot;c:%p---d:%p&quot;,c,d);//可以得出c和d是相等的</span><br><span class=\"line\">    printf(&quot;num:%ld&quot;,c-a);//可以得出c和a之间有几个元素</span><br><span class=\"line\">    printf(&quot;数组中第一个元素的字节数：%ld&quot;,sizeof(arr[0]));//获取数组第一个元素的字节数</span><br><span class=\"line\">    </span><br><span class=\"line\">    *c = 99;</span><br><span class=\"line\">    printf(&quot;arr+1: %d---%p&quot;,*c,c);</span><br><span class=\"line\"></span><br><span class=\"line\">    //打印结果：</span><br><span class=\"line\">    a:0x106f54410---b:0x106f54410</span><br><span class=\"line\">    c:0x106f54414---d:0x106f54414</span><br><span class=\"line\">    num:1</span><br><span class=\"line\">    数组中第一个元素的字节数：4</span><br><span class=\"line\">    arr+1: 99---0x106f54414</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：</p>\n<p>1）arr 表示arr[]数组的首地址</p>\n<p>2）指针c - 指针a，能获取到两个指针之间有几个元素</p>\n<p>3）指针变量加减一个整数,p(指针)(+/-)n(整数)计算方式为：指针地址 (+/-) n * 变量占有的字节数</p>\n<p>4）sizeof的用法：</p>\n<ul>\n<li>每种类型的数据在内存单元中占有的字节数是固定的,因此sizeof(arr)/sizeof(arr[0]) = 数组的元素的个数</li>\n<li>sizeof(arr)：获取的是数组总共占有多少字节</li>\n<li>sizeof(arr[0])：获取的是数组中一个元素占有的字节数</li>\n</ul>\n<p>5）数组变量保存的是地址,但数组变量中保存的地址是不能改变的,注意说的是指针地址不能变,但是指针指向的值是可以变的,因此数组变量应称为指针常量，可以改变数组中地址中存储的值。</p>\n<h4 id=\"OC-应用场景示例：\"><a href=\"#OC-应用场景示例：\" class=\"headerlink\" title=\"OC 应用场景示例：\"></a>OC 应用场景示例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//采用这种方式传参，可以获取到error的值</span><br><span class=\"line\">- (void)testErrorExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    [self handleResponseCode:400 error:&amp;err];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;err---%p--%@&quot;,err,err);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //指针运算符&amp;和*是从右往左运算,他们的优先级相同。*&amp;err和err一样。</span><br><span class=\"line\">    NSLog(@&quot;*&amp;err---%p--%@&quot;,*&amp;err,*&amp;err);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 &quot;(null)&quot; UserInfo=&#123;data=99&#125;</span><br><span class=\"line\">    *&amp;err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 &quot;(null)&quot; UserInfo=&#123;data=99&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)handleResponseCode:(NSInteger)code error:(NSError **)error&#123;</span><br><span class=\"line\">    if (code != 0) &#123;</span><br><span class=\"line\">        *error = [NSError errorWithDomain:NSCocoaErrorDomain code:100 userInfo:@&#123;@&quot;data&quot;:@&quot;99&quot;&#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、扩展\"><a href=\"#三、扩展\" class=\"headerlink\" title=\"三、扩展\"></a>三、扩展</h3><ol>\n<li><p>操作系统分为32位和64位，32位的最多只能支持4GB的内存，因为计算机底层并不使用十进制，使用的是二进制，32位的二进制只能支持4G个编号，这意味着操作系统只能为4GB的内存单元编号，因此32位的操作系统最多只能支持4GB的内存，多余的内存不会有编号,因此无法将数据存入这些内存单元中。</p>\n</li>\n<li><p>指针存储于栈区，不同数据类型的指针大小都相等，因为他们的值都是一个地址，并且长度也相同。32位操作系统中，指针大小是4个字节，64位操作系统中指针大小是8个字节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面代码是在64位操作系统演示</span><br><span class=\"line\">-(void)testGetPointerNum &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    char *a = &quot;myBlog&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int num1 = 1234325;</span><br><span class=\"line\">    int *b = &amp;num1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    double num2 = 3232.434;</span><br><span class=\"line\">    double *c = &amp;num2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;char *类型指针变量a所占字节数：%ld&quot;,sizeof(a));</span><br><span class=\"line\">    printf(&quot;int *类型指针变量b所占字节数：%ld&quot;,sizeof(b));</span><br><span class=\"line\">    printf(&quot;double *类型指针变量c所占字节数：%ld&quot;,sizeof(c));</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    char *类型指针变量a所占字节数：8</span><br><span class=\"line\">    int *类型指针变量b所占字节数：8</span><br><span class=\"line\">    double *类型指针变量c所占字节数：8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>结构体数据类型变量的大小：<code>对于某个结构体类型而言，其存储单元大小，等于它当中占用空间最大的基础类型所占用的字节数量。</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testStructExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data1&#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        char b;</span><br><span class=\"line\">        char c;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data2&#123;</span><br><span class=\"line\">        char c;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        char b;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data1 p1;</span><br><span class=\"line\">    p1.a = 1;</span><br><span class=\"line\">    p1.b = &#x27;d&#x27;;</span><br><span class=\"line\">    p1.c = &#x27;f&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data2 p2;</span><br><span class=\"line\">    p2.a = 1;</span><br><span class=\"line\">    p2.b = &#x27;d&#x27;;</span><br><span class=\"line\">    p2.c = &#x27;f&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;p1结构体占用的字节个数为：%ld&quot;,sizeof(p1));</span><br><span class=\"line\">    printf(&quot;p2结构体占用的字节个数为：%ld&quot;,sizeof(p2));</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    p1结构体占用的字节个数为：8</span><br><span class=\"line\">    p2结构体占用的字节个数为：12</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：</p>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"结构体内存结构示意图\"></p>\n<p>你可以看到，在 Data1 中，首先是 int 类型的 a 变量，占用了第一个存储单元，然后 b 和 c 占用了第二个存储单元的前两个字节。再看 Data2，由于 Data2 不同于 Data1 的字段顺序，b 占用了第一个存储单元的第一个字节，剩余的 3 个字节不够存放一个 int 类型变量的，所以按照上面我们讲的规则“当本存储单元不够安放的时候，就从下个存储单元的头部开始安放”， a 变量就单独占用了第二个存储单元，c 自己占用第三个存储单元的第一个字节。所以，虽然在数据表示上，Data1 和 Data2 是等价的，可 Data2 却占用了更多的存储空间，相比于 Data1 造成了 50% 的空间浪费。由此可见，在设计结构体的时候，不仅要设计新的结构体类型中所包含的数据字段，还需要关注各个字段之间的顺序排布。</p>\n</li>\n<li><p>内存与地址分布图：</p>\n</li>\n</ol>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.png\" alt=\"内存空间布局\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、引言：\"><a href=\"#一、引言：\" class=\"headerlink\" title=\"一、引言：\"></a>一、引言：</h3><p>日常开发中，我们经常遇到指针，同时指针也是C语言里极为重要的一个知识点，今天我们就来把它彻底弄明白。</p>","more":"<h3 id=\"二：正文\"><a href=\"#二：正文\" class=\"headerlink\" title=\"二：正文\"></a>二：正文</h3><h4 id=\"变量与变量值\"><a href=\"#变量与变量值\" class=\"headerlink\" title=\"变量与变量值:\"></a>变量与变量值:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据类型（int） 变量名（a） = 值（10）</span><br><span class=\"line\">int a = 10;</span><br></pre></td></tr></table></figure>\n\n<p>变量：变量是一个<strong>抽象概念</strong>，可以理解为允许存放数据的空间。当声明一个变量，计算机就会分配空间存放数据。变量可以通过变量名访问。</p>\n<p>变量值：变量里面存储的数据即为变量值，变量值可以为数值、字符等类型。</p>\n<h4 id=\"指针：\"><a href=\"#指针：\" class=\"headerlink\" title=\"指针：\"></a>指针：</h4><p><strong>指针：</strong>是一种<u>变量</u>，它的值是一个<strong>内存地址</strong>。（从三个方面分析指针：指针的类型、指针所指向的类型、指针的值）</p>\n<p><strong>指针类型：</strong><code>数据类型 *</code>，int *：整形数据类型的指针； char *： 字符数据类型的指针； void *：无数据类型的指针；等等…</p>\n<p><strong>取地址运算：</strong><code>&amp;变量 </code> ，取得的结果是变量的<strong>首</strong>地址，是一个<strong>值</strong>（eg：x10db5640）。</p>\n<p><strong>取变量运算：</strong><code>*指针变量</code>，取得的结果是一个变量。</p>\n<p>1.整形数据类型指针：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testIntExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //int类型变量a赋值为10</span><br><span class=\"line\">    int a = 10;</span><br><span class=\"line\">    //int*类型的指针变量b赋值为&amp;a</span><br><span class=\"line\">    int *b = &amp;a;</span><br><span class=\"line\">    //int类型变量c赋值为*b</span><br><span class=\"line\">    int c = *b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;变量b---值：%d 地址：%p&quot;,*b,b);</span><br><span class=\"line\">    printf(&quot;变量c---值：%d 地址：%p&quot;,c,&amp;c);</span><br><span class=\"line\">    </span><br><span class=\"line\">    打印结果：</span><br><span class=\"line\">    变量b---值：10 地址：0x10db5641c</span><br><span class=\"line\">    变量c---值：10 地址：0x10db5640c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：指针变量b的类型是：int *，指针变量b所指向的变量类型是int类型，b的值是一个地址：0x10db5641c。</p>\n<p>2.字符数据类型指针：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testCharExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    char *a = &quot;blog&quot;;</span><br><span class=\"line\">    char *b = a;</span><br><span class=\"line\">    char *c = b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;变量b所指变量的值：%s 变量b所指变量的首地址：%p 变量b的地址：%p&quot;,b,b,&amp;b);</span><br><span class=\"line\">    printf(&quot;变量c所指变量的值：%s 变量c所指变量的首地址：%p 变量c的地址：%p&quot;,c,c,&amp;c);</span><br><span class=\"line\">    </span><br><span class=\"line\">    打印结果：</span><br><span class=\"line\">\t\t变量b所指变量的值：blog 变量b所指变量的首地址：0x10a951bfc 变量b的地址：0x10a76f410</span><br><span class=\"line\">\t\t变量c所指变量的值：blog 变量c所指变量的首地址：0x10a951bfc 变量c的地址：0x10a76f408</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：char*类型指针 变量a 指向char类型变量blog，a的值是 变量blog的首地址0x10a951bfc。</p>\n<p>3.指针与数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testArrayExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int arr[] = &#123;4,12,34,6,7,788&#125;;</span><br><span class=\"line\">    int *a = arr;//得到的是arr的首地址</span><br><span class=\"line\">    int *b = &amp;arr[0];//得到的是arr数组第一个元素的地址</span><br><span class=\"line\">    int *c = arr + 1;//得到的是arr数组第二个元素的地址</span><br><span class=\"line\">    int *d = &amp;arr[0] + 1;//得到的是arr数组第二个元素的地址</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;a:%p---b:%p&quot;,a,b);//可以得出a和b是相等的</span><br><span class=\"line\">    printf(&quot;c:%p---d:%p&quot;,c,d);//可以得出c和d是相等的</span><br><span class=\"line\">    printf(&quot;num:%ld&quot;,c-a);//可以得出c和a之间有几个元素</span><br><span class=\"line\">    printf(&quot;数组中第一个元素的字节数：%ld&quot;,sizeof(arr[0]));//获取数组第一个元素的字节数</span><br><span class=\"line\">    </span><br><span class=\"line\">    *c = 99;</span><br><span class=\"line\">    printf(&quot;arr+1: %d---%p&quot;,*c,c);</span><br><span class=\"line\"></span><br><span class=\"line\">    //打印结果：</span><br><span class=\"line\">    a:0x106f54410---b:0x106f54410</span><br><span class=\"line\">    c:0x106f54414---d:0x106f54414</span><br><span class=\"line\">    num:1</span><br><span class=\"line\">    数组中第一个元素的字节数：4</span><br><span class=\"line\">    arr+1: 99---0x106f54414</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：</p>\n<p>1）arr 表示arr[]数组的首地址</p>\n<p>2）指针c - 指针a，能获取到两个指针之间有几个元素</p>\n<p>3）指针变量加减一个整数,p(指针)(+/-)n(整数)计算方式为：指针地址 (+/-) n * 变量占有的字节数</p>\n<p>4）sizeof的用法：</p>\n<ul>\n<li>每种类型的数据在内存单元中占有的字节数是固定的,因此sizeof(arr)/sizeof(arr[0]) = 数组的元素的个数</li>\n<li>sizeof(arr)：获取的是数组总共占有多少字节</li>\n<li>sizeof(arr[0])：获取的是数组中一个元素占有的字节数</li>\n</ul>\n<p>5）数组变量保存的是地址,但数组变量中保存的地址是不能改变的,注意说的是指针地址不能变,但是指针指向的值是可以变的,因此数组变量应称为指针常量，可以改变数组中地址中存储的值。</p>\n<h4 id=\"OC-应用场景示例：\"><a href=\"#OC-应用场景示例：\" class=\"headerlink\" title=\"OC 应用场景示例：\"></a>OC 应用场景示例：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//采用这种方式传参，可以获取到error的值</span><br><span class=\"line\">- (void)testErrorExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *err = nil;</span><br><span class=\"line\">    [self handleResponseCode:400 error:&amp;err];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;err---%p--%@&quot;,err,err);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //指针运算符&amp;和*是从右往左运算,他们的优先级相同。*&amp;err和err一样。</span><br><span class=\"line\">    NSLog(@&quot;*&amp;err---%p--%@&quot;,*&amp;err,*&amp;err);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 &quot;(null)&quot; UserInfo=&#123;data=99&#125;</span><br><span class=\"line\">    *&amp;err---0x6000031d07e0--Error Domain=NSCocoaErrorDomain Code=100 &quot;(null)&quot; UserInfo=&#123;data=99&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)handleResponseCode:(NSInteger)code error:(NSError **)error&#123;</span><br><span class=\"line\">    if (code != 0) &#123;</span><br><span class=\"line\">        *error = [NSError errorWithDomain:NSCocoaErrorDomain code:100 userInfo:@&#123;@&quot;data&quot;:@&quot;99&quot;&#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、扩展\"><a href=\"#三、扩展\" class=\"headerlink\" title=\"三、扩展\"></a>三、扩展</h3><ol>\n<li><p>操作系统分为32位和64位，32位的最多只能支持4GB的内存，因为计算机底层并不使用十进制，使用的是二进制，32位的二进制只能支持4G个编号，这意味着操作系统只能为4GB的内存单元编号，因此32位的操作系统最多只能支持4GB的内存，多余的内存不会有编号,因此无法将数据存入这些内存单元中。</p>\n</li>\n<li><p>指针存储于栈区，不同数据类型的指针大小都相等，因为他们的值都是一个地址，并且长度也相同。32位操作系统中，指针大小是4个字节，64位操作系统中指针大小是8个字节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面代码是在64位操作系统演示</span><br><span class=\"line\">-(void)testGetPointerNum &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    char *a = &quot;myBlog&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int num1 = 1234325;</span><br><span class=\"line\">    int *b = &amp;num1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    double num2 = 3232.434;</span><br><span class=\"line\">    double *c = &amp;num2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;char *类型指针变量a所占字节数：%ld&quot;,sizeof(a));</span><br><span class=\"line\">    printf(&quot;int *类型指针变量b所占字节数：%ld&quot;,sizeof(b));</span><br><span class=\"line\">    printf(&quot;double *类型指针变量c所占字节数：%ld&quot;,sizeof(c));</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    char *类型指针变量a所占字节数：8</span><br><span class=\"line\">    int *类型指针变量b所占字节数：8</span><br><span class=\"line\">    double *类型指针变量c所占字节数：8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>结构体数据类型变量的大小：<code>对于某个结构体类型而言，其存储单元大小，等于它当中占用空间最大的基础类型所占用的字节数量。</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)testStructExample &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data1&#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        char b;</span><br><span class=\"line\">        char c;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data2&#123;</span><br><span class=\"line\">        char c;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        char b;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data1 p1;</span><br><span class=\"line\">    p1.a = 1;</span><br><span class=\"line\">    p1.b = &#x27;d&#x27;;</span><br><span class=\"line\">    p1.c = &#x27;f&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    struct Data2 p2;</span><br><span class=\"line\">    p2.a = 1;</span><br><span class=\"line\">    p2.b = &#x27;d&#x27;;</span><br><span class=\"line\">    p2.c = &#x27;f&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;p1结构体占用的字节个数为：%ld&quot;,sizeof(p1));</span><br><span class=\"line\">    printf(&quot;p2结构体占用的字节个数为：%ld&quot;,sizeof(p2));</span><br><span class=\"line\">    </span><br><span class=\"line\">    //打印结果</span><br><span class=\"line\">    p1结构体占用的字节个数为：8</span><br><span class=\"line\">    p2结构体占用的字节个数为：12</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解读：</p>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"结构体内存结构示意图\"></p>\n<p>你可以看到，在 Data1 中，首先是 int 类型的 a 变量，占用了第一个存储单元，然后 b 和 c 占用了第二个存储单元的前两个字节。再看 Data2，由于 Data2 不同于 Data1 的字段顺序，b 占用了第一个存储单元的第一个字节，剩余的 3 个字节不够存放一个 int 类型变量的，所以按照上面我们讲的规则“当本存储单元不够安放的时候，就从下个存储单元的头部开始安放”， a 变量就单独占用了第二个存储单元，c 自己占用第三个存储单元的第一个字节。所以，虽然在数据表示上，Data1 和 Data2 是等价的，可 Data2 却占用了更多的存储空间，相比于 Data1 造成了 50% 的空间浪费。由此可见，在设计结构体的时候，不仅要设计新的结构体类型中所包含的数据字段，还需要关注各个字段之间的顺序排布。</p>\n</li>\n<li><p>内存与地址分布图：</p>\n</li>\n</ol>\n<p><img src=\"https://blog-1311875715.cos.ap-beijing.myqcloud.com/blog/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.png\" alt=\"内存空间布局\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl481uhe90001umfy7jqierma","tag_id":"cl481uhef0004umfyfjjo9cnw","_id":"cl481uhei0006umfy0pv6hjm9"},{"post_id":"cl481uhed0003umfy9kjq3dpw","tag_id":"cl481uhef0004umfyfjjo9cnw","_id":"cl481uhei0007umfyd7wi5e3t"}],"Tag":[{"name":"技术","_id":"cl481uhef0004umfyfjjo9cnw"}]}}